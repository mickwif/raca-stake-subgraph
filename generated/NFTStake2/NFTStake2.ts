// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AcceptNFTOwnership extends ethereum.Event {
  get params(): AcceptNFTOwnership__Params {
    return new AcceptNFTOwnership__Params(this);
  }
}

export class AcceptNFTOwnership__Params {
  _event: AcceptNFTOwnership;

  constructor(event: AcceptNFTOwnership) {
    this._event = event;
  }

  get _nftAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AddNFTTokenIdEvent extends ethereum.Event {
  get params(): AddNFTTokenIdEvent__Params {
    return new AddNFTTokenIdEvent__Params(this);
  }
}

export class AddNFTTokenIdEvent__Params {
  _event: AddNFTTokenIdEvent;

  constructor(event: AddNFTTokenIdEvent) {
    this._event = event;
  }

  get _nftAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class AddPoolEvent extends ethereum.Event {
  get params(): AddPoolEvent__Params {
    return new AddPoolEvent__Params(this);
  }
}

export class AddPoolEvent__Params {
  _event: AddPoolEvent;

  constructor(event: AddPoolEvent) {
    this._event = event;
  }

  get _nftAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _stakeCount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _stakeTime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _rewardType(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get _rewardAddress(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get _rewardCountPer(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get _rewardAccount(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get _maxStakeCount(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class ForceWithdrawEvent extends ethereum.Event {
  get params(): ForceWithdrawEvent__Params {
    return new ForceWithdrawEvent__Params(this);
  }
}

export class ForceWithdrawEvent__Params {
  _event: ForceWithdrawEvent;

  constructor(event: ForceWithdrawEvent) {
    this._event = event;
  }

  get _pid(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _sid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _beginTime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _tokenIds(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }
}

export class HarvestNFTEvent extends ethereum.Event {
  get params(): HarvestNFTEvent__Params {
    return new HarvestNFTEvent__Params(this);
  }
}

export class HarvestNFTEvent__Params {
  _event: HarvestNFTEvent;

  constructor(event: HarvestNFTEvent) {
    this._event = event;
  }

  get _pid(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _sid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _beginTokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _endTokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _tokenIds(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class HarvestTokenEvent extends ethereum.Event {
  get params(): HarvestTokenEvent__Params {
    return new HarvestTokenEvent__Params(this);
  }
}

export class HarvestTokenEvent__Params {
  _event: HarvestTokenEvent;

  constructor(event: HarvestTokenEvent) {
    this._event = event;
  }

  get _pid(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _sid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _tokenIds(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }
}

export class NominateNFTPotentialOwner extends ethereum.Event {
  get params(): NominateNFTPotentialOwner__Params {
    return new NominateNFTPotentialOwner__Params(this);
  }
}

export class NominateNFTPotentialOwner__Params {
  _event: NominateNFTPotentialOwner;

  constructor(event: NominateNFTPotentialOwner) {
    this._event = event;
  }

  get _nftAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class StakeEvent extends ethereum.Event {
  get params(): StakeEvent__Params {
    return new StakeEvent__Params(this);
  }
}

export class StakeEvent__Params {
  _event: StakeEvent;

  constructor(event: StakeEvent) {
    this._event = event;
  }

  get _pid(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _tokenIds(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }
}

export class TransferNFTOwnership extends ethereum.Event {
  get params(): TransferNFTOwnership__Params {
    return new TransferNFTOwnership__Params(this);
  }
}

export class TransferNFTOwnership__Params {
  _event: TransferNFTOwnership;

  constructor(event: TransferNFTOwnership) {
    this._event = event;
  }

  get _nftAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NFTStake2__getUserStakeHisResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: boolean;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    return map;
  }
}

export class NFTStake2__poolResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: i32;
  value4: Address;
  value5: BigInt;
  value6: Address;
  value7: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: i32,
    value4: Address,
    value5: BigInt,
    value6: Address,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromAddress(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }
}

export class NFTStake2 extends ethereum.SmartContract {
  static bind(address: Address): NFTStake2 {
    return new NFTStake2("NFTStake2", address);
  }

  getPoolLength(): BigInt {
    let result = super.call("getPoolLength", "getPoolLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getPoolLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPoolLength",
      "getPoolLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserStakeHis(
    _pid: BigInt,
    _userAddr: Address,
    _index: BigInt,
    _time: BigInt
  ): NFTStake2__getUserStakeHisResult {
    let result = super.call(
      "getUserStakeHis",
      "getUserStakeHis(uint256,address,uint256,uint256):(uint256,uint256,uint256,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_pid),
        ethereum.Value.fromAddress(_userAddr),
        ethereum.Value.fromUnsignedBigInt(_index),
        ethereum.Value.fromUnsignedBigInt(_time)
      ]
    );

    return new NFTStake2__getUserStakeHisResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBoolean()
    );
  }

  try_getUserStakeHis(
    _pid: BigInt,
    _userAddr: Address,
    _index: BigInt,
    _time: BigInt
  ): ethereum.CallResult<NFTStake2__getUserStakeHisResult> {
    let result = super.tryCall(
      "getUserStakeHis",
      "getUserStakeHis(uint256,address,uint256,uint256):(uint256,uint256,uint256,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_pid),
        ethereum.Value.fromAddress(_userAddr),
        ethereum.Value.fromUnsignedBigInt(_index),
        ethereum.Value.fromUnsignedBigInt(_time)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NFTStake2__getUserStakeHisResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBoolean()
      )
    );
  }

  getUserStakeHisCnt(_pid: BigInt, _userAddr: Address): BigInt {
    let result = super.call(
      "getUserStakeHisCnt",
      "getUserStakeHisCnt(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_pid),
        ethereum.Value.fromAddress(_userAddr)
      ]
    );

    return result[0].toBigInt();
  }

  try_getUserStakeHisCnt(
    _pid: BigInt,
    _userAddr: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserStakeHisCnt",
      "getUserStakeHisCnt(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_pid),
        ethereum.Value.fromAddress(_userAddr)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nftTokenIds(param0: Address): BigInt {
    let result = super.call("nftTokenIds", "nftTokenIds(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_nftTokenIds(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nftTokenIds",
      "nftTokenIds(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pool(param0: BigInt): NFTStake2__poolResult {
    let result = super.call(
      "pool",
      "pool(uint256):(address,uint256,uint256,uint8,address,uint256,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new NFTStake2__poolResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toI32(),
      result[4].toAddress(),
      result[5].toBigInt(),
      result[6].toAddress(),
      result[7].toBigInt()
    );
  }

  try_pool(param0: BigInt): ethereum.CallResult<NFTStake2__poolResult> {
    let result = super.tryCall(
      "pool",
      "pool(uint256):(address,uint256,uint256,uint8,address,uint256,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NFTStake2__poolResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toI32(),
        value[4].toAddress(),
        value[5].toBigInt(),
        value[6].toAddress(),
        value[7].toBigInt()
      )
    );
  }

  poolStakes(param0: BigInt, param1: Address, param2: BigInt): BigInt {
    let result = super.call(
      "poolStakes",
      "poolStakes(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return result[0].toBigInt();
  }

  try_poolStakes(
    param0: BigInt,
    param1: Address,
    param2: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "poolStakes",
      "poolStakes(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userStakes(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "userStakes",
      "userStakes(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_userStakes(param0: Address, param1: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userStakes",
      "userStakes(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptNFTOwnershipCall extends ethereum.Call {
  get inputs(): AcceptNFTOwnershipCall__Inputs {
    return new AcceptNFTOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptNFTOwnershipCall__Outputs {
    return new AcceptNFTOwnershipCall__Outputs(this);
  }
}

export class AcceptNFTOwnershipCall__Inputs {
  _call: AcceptNFTOwnershipCall;

  constructor(call: AcceptNFTOwnershipCall) {
    this._call = call;
  }

  get _nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AcceptNFTOwnershipCall__Outputs {
  _call: AcceptNFTOwnershipCall;

  constructor(call: AcceptNFTOwnershipCall) {
    this._call = call;
  }
}

export class AddNFTTokenIdCall extends ethereum.Call {
  get inputs(): AddNFTTokenIdCall__Inputs {
    return new AddNFTTokenIdCall__Inputs(this);
  }

  get outputs(): AddNFTTokenIdCall__Outputs {
    return new AddNFTTokenIdCall__Outputs(this);
  }
}

export class AddNFTTokenIdCall__Inputs {
  _call: AddNFTTokenIdCall;

  constructor(call: AddNFTTokenIdCall) {
    this._call = call;
  }

  get _nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddNFTTokenIdCall__Outputs {
  _call: AddNFTTokenIdCall;

  constructor(call: AddNFTTokenIdCall) {
    this._call = call;
  }
}

export class AddPoolCall extends ethereum.Call {
  get inputs(): AddPoolCall__Inputs {
    return new AddPoolCall__Inputs(this);
  }

  get outputs(): AddPoolCall__Outputs {
    return new AddPoolCall__Outputs(this);
  }
}

export class AddPoolCall__Inputs {
  _call: AddPoolCall;

  constructor(call: AddPoolCall) {
    this._call = call;
  }

  get _nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _stakeCount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _stakeTime(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _rewardType(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get _rewardAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _rewardCountPer(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _rewardAccount(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _maxStakeCount(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class AddPoolCall__Outputs {
  _call: AddPoolCall;

  constructor(call: AddPoolCall) {
    this._call = call;
  }
}

export class ForceWithdrawCall extends ethereum.Call {
  get inputs(): ForceWithdrawCall__Inputs {
    return new ForceWithdrawCall__Inputs(this);
  }

  get outputs(): ForceWithdrawCall__Outputs {
    return new ForceWithdrawCall__Outputs(this);
  }
}

export class ForceWithdrawCall__Inputs {
  _call: ForceWithdrawCall;

  constructor(call: ForceWithdrawCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _sid(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ForceWithdrawCall__Outputs {
  _call: ForceWithdrawCall;

  constructor(call: ForceWithdrawCall) {
    this._call = call;
  }
}

export class HarvestCall extends ethereum.Call {
  get inputs(): HarvestCall__Inputs {
    return new HarvestCall__Inputs(this);
  }

  get outputs(): HarvestCall__Outputs {
    return new HarvestCall__Outputs(this);
  }
}

export class HarvestCall__Inputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _sid(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class HarvestCall__Outputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }
}

export class NominateNFTPotentialOwnerCall extends ethereum.Call {
  get inputs(): NominateNFTPotentialOwnerCall__Inputs {
    return new NominateNFTPotentialOwnerCall__Inputs(this);
  }

  get outputs(): NominateNFTPotentialOwnerCall__Outputs {
    return new NominateNFTPotentialOwnerCall__Outputs(this);
  }
}

export class NominateNFTPotentialOwnerCall__Inputs {
  _call: NominateNFTPotentialOwnerCall;

  constructor(call: NominateNFTPotentialOwnerCall) {
    this._call = call;
  }

  get _nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _newOwner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class NominateNFTPotentialOwnerCall__Outputs {
  _call: NominateNFTPotentialOwnerCall;

  constructor(call: NominateNFTPotentialOwnerCall) {
    this._call = call;
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _tokenIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class TransferNFTOwnershipCall extends ethereum.Call {
  get inputs(): TransferNFTOwnershipCall__Inputs {
    return new TransferNFTOwnershipCall__Inputs(this);
  }

  get outputs(): TransferNFTOwnershipCall__Outputs {
    return new TransferNFTOwnershipCall__Outputs(this);
  }
}

export class TransferNFTOwnershipCall__Inputs {
  _call: TransferNFTOwnershipCall;

  constructor(call: TransferNFTOwnershipCall) {
    this._call = call;
  }

  get _nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _newOwner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class TransferNFTOwnershipCall__Outputs {
  _call: TransferNFTOwnershipCall;

  constructor(call: TransferNFTOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
